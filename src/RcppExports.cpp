// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppMLPACK.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// lars_mlpackMain
void lars_mlpackMain();
RcppExport SEXP _RcppMLPACK_lars_mlpackMain() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    lars_mlpackMain();
    return R_NilValue;
END_RCPP
}
// CLI_GetParamLARSPtr
SEXP CLI_GetParamLARSPtr(SEXP paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamLARSPtr(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamLARSPtr(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_SetParamLARSPtr
void CLI_SetParamLARSPtr(SEXP paramName, SEXP ptr);
RcppExport SEXP _RcppMLPACK_CLI_SetParamLARSPtr(SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    CLI_SetParamLARSPtr(paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLARSToXML
SEXP SerializeLARSToXML(SEXP ptr);
RcppExport SEXP _RcppMLPACK_SerializeLARSToXML(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLARSToXML(ptr));
    return rcpp_result_gen;
END_RCPP
}
// SerializeLARSPtr
SEXP SerializeLARSPtr(SEXP ptr);
RcppExport SEXP _RcppMLPACK_SerializeLARSPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLARSPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// UnserializeLARSPtr
SEXP UnserializeLARSPtr(Rcpp::RawVector str);
RcppExport SEXP _RcppMLPACK_UnserializeLARSPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(UnserializeLARSPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// pca_mlpackMain
void pca_mlpackMain();
RcppExport SEXP _RcppMLPACK_pca_mlpackMain() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    pca_mlpackMain();
    return R_NilValue;
END_RCPP
}
// CLI_RestoreSettings
void CLI_RestoreSettings(const std::string& programName);
RcppExport SEXP _RcppMLPACK_CLI_RestoreSettings(SEXP programNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type programName(programNameSEXP);
    CLI_RestoreSettings(programName);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamInt
void CLI_SetParamInt(const std::string& paramName, int paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamInt(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< int >::type paramValue(paramValueSEXP);
    CLI_SetParamInt(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamDouble
void CLI_SetParamDouble(const std::string& paramName, double paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamDouble(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< double >::type paramValue(paramValueSEXP);
    CLI_SetParamDouble(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamString
void CLI_SetParamString(const std::string& paramName, std::string& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamString(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< std::string& >::type paramValue(paramValueSEXP);
    CLI_SetParamString(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamBool
void CLI_SetParamBool(const std::string& paramName, bool paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamBool(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< bool >::type paramValue(paramValueSEXP);
    CLI_SetParamBool(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamVectorStr
void CLI_SetParamVectorStr(const std::string& paramName, const std::vector<std::string>& str);
RcppExport SEXP _RcppMLPACK_CLI_SetParamVectorStr(SEXP paramNameSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type str(strSEXP);
    CLI_SetParamVectorStr(paramName, str);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamVectorInt
void CLI_SetParamVectorInt(const std::string& paramName, const std::vector<int>& ints);
RcppExport SEXP _RcppMLPACK_CLI_SetParamVectorInt(SEXP paramNameSEXP, SEXP intsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ints(intsSEXP);
    CLI_SetParamVectorInt(paramName, ints);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamMat
void CLI_SetParamMat(const std::string& paramName, const arma::mat& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamMat(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type paramValue(paramValueSEXP);
    CLI_SetParamMat(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamUMat
void CLI_SetParamUMat(const std::string& paramName, const arma::Mat<size_t>& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamUMat(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<size_t>& >::type paramValue(paramValueSEXP);
    CLI_SetParamUMat(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamRow
void CLI_SetParamRow(const std::string& paramName, const arma::rowvec& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamRow(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type paramValue(paramValueSEXP);
    CLI_SetParamRow(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamURow
void CLI_SetParamURow(const std::string& paramName, const arma::Row<size_t>& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamURow(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::Row<size_t>& >::type paramValue(paramValueSEXP);
    CLI_SetParamURow(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamCol
void CLI_SetParamCol(const std::string& paramName, const arma::vec& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamCol(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type paramValue(paramValueSEXP);
    CLI_SetParamCol(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamUCol
void CLI_SetParamUCol(const std::string& paramName, const arma::Col<size_t>& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamUCol(SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::Col<size_t>& >::type paramValue(paramValueSEXP);
    CLI_SetParamUCol(paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_SetParamMatWithInfo
void CLI_SetParamMatWithInfo(const std::string& paramName, const LogicalVector& dimensions, const arma::mat& paramValue);
RcppExport SEXP _RcppMLPACK_CLI_SetParamMatWithInfo(SEXP paramNameSEXP, SEXP dimensionsSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type paramValue(paramValueSEXP);
    CLI_SetParamMatWithInfo(paramName, dimensions, paramValue);
    return R_NilValue;
END_RCPP
}
// CLI_GetParamInt
int CLI_GetParamInt(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamInt(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamInt(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamDouble
double CLI_GetParamDouble(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamDouble(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamDouble(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamString
std::string& CLI_GetParamString(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamString(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamString(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamBool
bool CLI_GetParamBool(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamBool(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamBool(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamVectorStr
const std::vector<std::string>& CLI_GetParamVectorStr(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamVectorStr(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamVectorStr(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamVectorInt
const std::vector<int>& CLI_GetParamVectorInt(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamVectorInt(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamVectorInt(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamMat
const arma::mat& CLI_GetParamMat(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamMat(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamMat(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamUMat
const arma::Mat<size_t>& CLI_GetParamUMat(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamUMat(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamUMat(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamRow
const arma::vec CLI_GetParamRow(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamRow(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamRow(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamURow
const arma::Col<size_t> CLI_GetParamURow(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamURow(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamURow(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamCol
const arma::rowvec CLI_GetParamCol(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamCol(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamCol(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamUCol
const arma::Row<size_t> CLI_GetParamUCol(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamUCol(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamUCol(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_GetParamMatWithInfo
List CLI_GetParamMatWithInfo(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamMatWithInfo(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamMatWithInfo(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_EnableVerbose
void CLI_EnableVerbose();
RcppExport SEXP _RcppMLPACK_CLI_EnableVerbose() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    CLI_EnableVerbose();
    return R_NilValue;
END_RCPP
}
// CLI_DisableVerbose
void CLI_DisableVerbose();
RcppExport SEXP _RcppMLPACK_CLI_DisableVerbose() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    CLI_DisableVerbose();
    return R_NilValue;
END_RCPP
}
// CLI_ResetTimers
void CLI_ResetTimers();
RcppExport SEXP _RcppMLPACK_CLI_ResetTimers() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    CLI_ResetTimers();
    return R_NilValue;
END_RCPP
}
// CLI_SetPassed
void CLI_SetPassed(const std::string& paramName);
RcppExport SEXP _RcppMLPACK_CLI_SetPassed(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    CLI_SetPassed(paramName);
    return R_NilValue;
END_RCPP
}
// CLI_ClearSettings
void CLI_ClearSettings();
RcppExport SEXP _RcppMLPACK_CLI_ClearSettings() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    CLI_ClearSettings();
    return R_NilValue;
END_RCPP
}
// test_r_binding_mlpackMain
void test_r_binding_mlpackMain();
RcppExport SEXP _RcppMLPACK_test_r_binding_mlpackMain() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_r_binding_mlpackMain();
    return R_NilValue;
END_RCPP
}
// CLI_GetParamGaussianKernelPtr
SEXP CLI_GetParamGaussianKernelPtr(SEXP paramName);
RcppExport SEXP _RcppMLPACK_CLI_GetParamGaussianKernelPtr(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CLI_GetParamGaussianKernelPtr(paramName));
    return rcpp_result_gen;
END_RCPP
}
// CLI_SetParamGaussianKernelPtr
void CLI_SetParamGaussianKernelPtr(SEXP paramName, SEXP ptr);
RcppExport SEXP _RcppMLPACK_CLI_SetParamGaussianKernelPtr(SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    CLI_SetParamGaussianKernelPtr(paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeGaussianKernelToXML
SEXP SerializeGaussianKernelToXML(SEXP ptr);
RcppExport SEXP _RcppMLPACK_SerializeGaussianKernelToXML(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeGaussianKernelToXML(ptr));
    return rcpp_result_gen;
END_RCPP
}
// SerializeGaussianKernelPtr
SEXP SerializeGaussianKernelPtr(SEXP ptr);
RcppExport SEXP _RcppMLPACK_SerializeGaussianKernelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeGaussianKernelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// UnserializeGaussianKernelPtr
SEXP UnserializeGaussianKernelPtr(Rcpp::RawVector str);
RcppExport SEXP _RcppMLPACK_UnserializeGaussianKernelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(UnserializeGaussianKernelPtr(str));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppMLPACK_lars_mlpackMain", (DL_FUNC) &_RcppMLPACK_lars_mlpackMain, 0},
    {"_RcppMLPACK_CLI_GetParamLARSPtr", (DL_FUNC) &_RcppMLPACK_CLI_GetParamLARSPtr, 1},
    {"_RcppMLPACK_CLI_SetParamLARSPtr", (DL_FUNC) &_RcppMLPACK_CLI_SetParamLARSPtr, 2},
    {"_RcppMLPACK_SerializeLARSToXML", (DL_FUNC) &_RcppMLPACK_SerializeLARSToXML, 1},
    {"_RcppMLPACK_SerializeLARSPtr", (DL_FUNC) &_RcppMLPACK_SerializeLARSPtr, 1},
    {"_RcppMLPACK_UnserializeLARSPtr", (DL_FUNC) &_RcppMLPACK_UnserializeLARSPtr, 1},
    {"_RcppMLPACK_pca_mlpackMain", (DL_FUNC) &_RcppMLPACK_pca_mlpackMain, 0},
    {"_RcppMLPACK_CLI_RestoreSettings", (DL_FUNC) &_RcppMLPACK_CLI_RestoreSettings, 1},
    {"_RcppMLPACK_CLI_SetParamInt", (DL_FUNC) &_RcppMLPACK_CLI_SetParamInt, 2},
    {"_RcppMLPACK_CLI_SetParamDouble", (DL_FUNC) &_RcppMLPACK_CLI_SetParamDouble, 2},
    {"_RcppMLPACK_CLI_SetParamString", (DL_FUNC) &_RcppMLPACK_CLI_SetParamString, 2},
    {"_RcppMLPACK_CLI_SetParamBool", (DL_FUNC) &_RcppMLPACK_CLI_SetParamBool, 2},
    {"_RcppMLPACK_CLI_SetParamVectorStr", (DL_FUNC) &_RcppMLPACK_CLI_SetParamVectorStr, 2},
    {"_RcppMLPACK_CLI_SetParamVectorInt", (DL_FUNC) &_RcppMLPACK_CLI_SetParamVectorInt, 2},
    {"_RcppMLPACK_CLI_SetParamMat", (DL_FUNC) &_RcppMLPACK_CLI_SetParamMat, 2},
    {"_RcppMLPACK_CLI_SetParamUMat", (DL_FUNC) &_RcppMLPACK_CLI_SetParamUMat, 2},
    {"_RcppMLPACK_CLI_SetParamRow", (DL_FUNC) &_RcppMLPACK_CLI_SetParamRow, 2},
    {"_RcppMLPACK_CLI_SetParamURow", (DL_FUNC) &_RcppMLPACK_CLI_SetParamURow, 2},
    {"_RcppMLPACK_CLI_SetParamCol", (DL_FUNC) &_RcppMLPACK_CLI_SetParamCol, 2},
    {"_RcppMLPACK_CLI_SetParamUCol", (DL_FUNC) &_RcppMLPACK_CLI_SetParamUCol, 2},
    {"_RcppMLPACK_CLI_SetParamMatWithInfo", (DL_FUNC) &_RcppMLPACK_CLI_SetParamMatWithInfo, 3},
    {"_RcppMLPACK_CLI_GetParamInt", (DL_FUNC) &_RcppMLPACK_CLI_GetParamInt, 1},
    {"_RcppMLPACK_CLI_GetParamDouble", (DL_FUNC) &_RcppMLPACK_CLI_GetParamDouble, 1},
    {"_RcppMLPACK_CLI_GetParamString", (DL_FUNC) &_RcppMLPACK_CLI_GetParamString, 1},
    {"_RcppMLPACK_CLI_GetParamBool", (DL_FUNC) &_RcppMLPACK_CLI_GetParamBool, 1},
    {"_RcppMLPACK_CLI_GetParamVectorStr", (DL_FUNC) &_RcppMLPACK_CLI_GetParamVectorStr, 1},
    {"_RcppMLPACK_CLI_GetParamVectorInt", (DL_FUNC) &_RcppMLPACK_CLI_GetParamVectorInt, 1},
    {"_RcppMLPACK_CLI_GetParamMat", (DL_FUNC) &_RcppMLPACK_CLI_GetParamMat, 1},
    {"_RcppMLPACK_CLI_GetParamUMat", (DL_FUNC) &_RcppMLPACK_CLI_GetParamUMat, 1},
    {"_RcppMLPACK_CLI_GetParamRow", (DL_FUNC) &_RcppMLPACK_CLI_GetParamRow, 1},
    {"_RcppMLPACK_CLI_GetParamURow", (DL_FUNC) &_RcppMLPACK_CLI_GetParamURow, 1},
    {"_RcppMLPACK_CLI_GetParamCol", (DL_FUNC) &_RcppMLPACK_CLI_GetParamCol, 1},
    {"_RcppMLPACK_CLI_GetParamUCol", (DL_FUNC) &_RcppMLPACK_CLI_GetParamUCol, 1},
    {"_RcppMLPACK_CLI_GetParamMatWithInfo", (DL_FUNC) &_RcppMLPACK_CLI_GetParamMatWithInfo, 1},
    {"_RcppMLPACK_CLI_EnableVerbose", (DL_FUNC) &_RcppMLPACK_CLI_EnableVerbose, 0},
    {"_RcppMLPACK_CLI_DisableVerbose", (DL_FUNC) &_RcppMLPACK_CLI_DisableVerbose, 0},
    {"_RcppMLPACK_CLI_ResetTimers", (DL_FUNC) &_RcppMLPACK_CLI_ResetTimers, 0},
    {"_RcppMLPACK_CLI_SetPassed", (DL_FUNC) &_RcppMLPACK_CLI_SetPassed, 1},
    {"_RcppMLPACK_CLI_ClearSettings", (DL_FUNC) &_RcppMLPACK_CLI_ClearSettings, 0},
    {"_RcppMLPACK_test_r_binding_mlpackMain", (DL_FUNC) &_RcppMLPACK_test_r_binding_mlpackMain, 0},
    {"_RcppMLPACK_CLI_GetParamGaussianKernelPtr", (DL_FUNC) &_RcppMLPACK_CLI_GetParamGaussianKernelPtr, 1},
    {"_RcppMLPACK_CLI_SetParamGaussianKernelPtr", (DL_FUNC) &_RcppMLPACK_CLI_SetParamGaussianKernelPtr, 2},
    {"_RcppMLPACK_SerializeGaussianKernelToXML", (DL_FUNC) &_RcppMLPACK_SerializeGaussianKernelToXML, 1},
    {"_RcppMLPACK_SerializeGaussianKernelPtr", (DL_FUNC) &_RcppMLPACK_SerializeGaussianKernelPtr, 1},
    {"_RcppMLPACK_UnserializeGaussianKernelPtr", (DL_FUNC) &_RcppMLPACK_UnserializeGaussianKernelPtr, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppMLPACK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
