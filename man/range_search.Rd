% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/range_search.R
\name{range_search}
\alias{range_search}
\title{Range Search}
\usage{
range_search(
  input_model = NA,
  leaf_size = NA,
  max = NA,
  min = NA,
  naive = FALSE,
  query = NA,
  random_basis = FALSE,
  reference = NA,
  seed = NA,
  single_mode = FALSE,
  tree_type = NA,
  verbose = FALSE
)
}
\arguments{
\item{input_model}{File containing pre-trained range search model.}

\item{leaf_size}{Leaf size for tree building (used for kd-trees, vp trees, random
projection trees, UB trees, R trees, R* trees, X trees, Hilbert R trees, R+
trees, R++ trees, and octrees).  Default value "20".}

\item{max}{Upper bound in range (if not specified, +inf will be used.  Default
value "0".}

\item{min}{Lower bound in range.  Default value "0".}

\item{naive}{If true, O(n^2) naive mode is used for computation.  Default value
"FALSE".}

\item{query}{File containing query points (optional).}

\item{random_basis}{Before tree-building, project the data onto a random
orthogonal basis.  Default value "FALSE".}

\item{reference}{Matrix containing the reference dataset.}

\item{seed}{Random seed (if 0, std::time(NULL) is used).  Default value "0".}

\item{single_mode}{If true, single-tree search is used (as opposed to dual-tree
search).  Default value "FALSE".}

\item{tree_type}{Type of tree to use: 'kd', 'vp', 'rp', 'max-rp', 'ub', 'cover',
'r', 'r-star', 'x', 'ball', 'hilbert-r', 'r-plus', 'r-plus-plus', 'oct'. 
Default value "kd".}

\item{verbose}{Display informational messages and the full list of parameters and
timers at the end of execution.  Default value "FALSE".}
}
\value{
A list with several components:
\item{distances_file}{File to output distances into.  Default value "".}
\item{neighbors_file}{File to output neighbors into.  Default value "".}
\item{output_model}{If specified, the range search model will be saved to the
  given file.}
}
\description{
An implementation of range search with single-tree and dual-tree algorithms. 
Given a set of reference points and a set of query points and a range, this
can find the set of reference points within the desired range for each query
point, and any trees built during the computation can be saved for reuse with
future range searches.
}
\details{
This program implements range search with a Euclidean distance metric. For a
given query point, a given range, and a given set of reference points, the
program will return all of the reference points with distance to the query
point in the given range.  This is performed for an entire set of query
points. You may specify a separate set of reference and query points, or only
a reference set -- which is then used as both the reference and query set. 
The given range is taken to be inclusive (that is, points with a distance
exactly equal to the minimum and maximum of the range are included in the
results).
}
\examples{
# For example, the following will calculate the points within the range [2,
# 5] of each point in "input" and store the distances in"distances" and the
# neighbors in "neighbors"

\donttest{
output <- range_search(min=2, max=5)
input <- output$distances_file
distances <- output$distances_file
neighbors <- output$neighbors_file
}

# The output files are organized such that line i corresponds to the points
# found for query point i.  Because sometimes 0 points may be found in the
# given range, lines of the output files may be empty.  The points are not
# ordered in any specific manner.
# 
# Because the number of points returned for each query point may differ, the
# resultant CSV-like files may not be loadable by many programs.  However, at
# this time a better way to store this non-square result is not known.  As a
# result, any output files will be written as CSVs in this manner, regardless
# of the given extension.
}
\author{
MLPACK Developers
}
